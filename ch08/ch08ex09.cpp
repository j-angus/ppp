/**
 * @file ch08ex09.cpp
 * @date 2011-07-02
 *
 * Write a function randint() that produces a pseudo-random number in the
 * range [0:MAXINT]
 * Taken from Knuth, The Art of Computer Programming, Vol 2 (3E), ch3.6, page 185
 * Add function rand_in_range(int a, int b) using my_randint()
 * randint() is a standard library function - don't use that name as suggested in ppp
 */

#include <time.h> // to get current time in seconds
#include <limits> // to get max value of integer
#include "../std_lib_facilities.h"

int my_randint(void); // produce a pseudo random integer given 0<x && x<2147483647
int rand_in_range(int a, int b); // use my_randint() to produce a rand int in range [a:b]
int main()
{
	const int low = 0;
	const int high = 100;

	try {
		for (int i=0; i<20000; ++i)
			cout << "rand_in_range(" << low << "," << high <<"): " << rand_in_range(low, high) << endl;
	}
	catch (runtime_error& e) {
		cerr << "runtime error: " << e.what() << endl;

		return 1;
}
	return 0;
}

// produce a pseudo random integer given 0<x && x<2147483647
int my_randint(void)
{
	#define MM 2147483647 // a Mersenne prime
	#define AA 48271	// does well in the spectral test
	#define QQ 44488	// MM / AA
	#define RR 3399	// MM % AA; it is important that RR<QQ

	// seed the random number generator with the current time in seconds
	// make x static so that it keeps its value between function calls.
	// x is assigned the random num generated by this func
	// to be used as the seed for the next call.
	static long x = time(NULL);
	x = AA*(x%QQ)-RR*(x/QQ);
	if (x<0)
		x+=MM;
	// return x;

	// add more random numbers (page 186)
	#define MMM 214783399	// a non-Mersenne prime
	#define AAA 40692		// good spectral success
	#define QQQ 52774		// MMM / AAA
	#define RRR 3791		// MMM % AAA; again less than QQQ

	long y = AAA*(y%QQQ)-RRR*(y/QQQ);
	if (y<0)
		y+=MMM;
	int z=x-y;
	if (z<0)
		z+=MM;
	x = z;
	return z;
}

// use my_randint() to produce a rand int in range [a:b]
int rand_in_range(int a, int b)
{
	if (b < a) // a must be less than a
		error("rand_in_range(int a,int b): a must be less than b");
	return (a + (my_randint() / (1.0 * numeric_limits<int>::max())) * ((b-a)+1));
}
